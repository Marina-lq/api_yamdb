============================= test session starts =============================
platform win32 -- Python 3.7.9, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- c:\dev\api_yamdb\venv\scripts\python.exe
django: settings: api_yamdb.settings (from ini)
rootdir: C:\Dev\api_yamdb, configfile: pytest.ini
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 4 items

tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 25%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin FAILED       [ 50%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail FAILED     [ 75%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission FAILED [100%]

================================== FAILURES ===================================
_____________________ Test04TitleAPI.test_02_title_admin ______________________

self = <tests.test_04_title.Test04TitleAPI object at 0x00000222E8802588>
admin_client = <rest_framework.test.APIClient object at 0x00000222E8A75D48>

    @pytest.mark.django_db(transaction=True)
    def test_02_title_admin(self, admin_client):
>       genres = create_genre(admin_client)

tests\test_04_title.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:52: in create_genre
    admin_client.post('/api/v1/genres/', data=data)
venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:18: in create
    serializer.is_valid(raise_exception=True)
venv\lib\site-packages\rest_framework\serializers.py:220: in is_valid
    self._validated_data = self.run_validation(self.initial_data)
venv\lib\site-packages\rest_framework\serializers.py:419: in run_validation
    value = self.to_internal_value(data)
venv\lib\site-packages\rest_framework\serializers.py:472: in to_internal_value
    for field in fields:
venv\lib\site-packages\rest_framework\serializers.py:355: in _writable_fields
    for field in self.fields.values():
venv\lib\site-packages\django\utils\functional.py:80: in __get__
    res = instance.__dict__[self.name] = self.func(instance)
venv\lib\site-packages\rest_framework\serializers.py:349: in fields
    for key, value in self.get_fields().items():
venv\lib\site-packages\rest_framework\serializers.py:1029: in get_fields
    field_names = self.get_field_names(declared_fields, info)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <[AssertionError("Cannot set both 'fields' and 'exclude' options on serializer GenreSerializer.") raised in repr()] GenreSerializer object at 0x222e8956848>
declared_fields = OrderedDict()
info = FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('name', <django.db.models.fields.CharFiel..., related_model=<class 'reviews.models.Title'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))

    def get_field_names(self, declared_fields, info):
        """
        Returns the list of all field names that should be created when
        instantiating this serializer class. This is based on the default
        set of fields, but also takes into account the `Meta.fields` or
        `Meta.exclude` options if they have been specified.
        """
        fields = getattr(self.Meta, 'fields', None)
        exclude = getattr(self.Meta, 'exclude', None)
    
        if fields and fields != ALL_FIELDS and not isinstance(fields, (list, tuple)):
            raise TypeError(
                'The `fields` option must be a list or tuple or "__all__". '
                'Got %s.' % type(fields).__name__
            )
    
        if exclude and not isinstance(exclude, (list, tuple)):
            raise TypeError(
                'The `exclude` option must be a list or tuple. Got %s.' %
                type(exclude).__name__
            )
    
        assert not (fields and exclude), (
            "Cannot set both 'fields' and 'exclude' options on "
            "serializer {serializer_class}.".format(
>               serializer_class=self.__class__.__name__
            )
        )
E       AssertionError: Cannot set both 'fields' and 'exclude' options on serializer GenreSerializer.

venv\lib\site-packages\rest_framework\serializers.py:1097: AssertionError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/genres/
Traceback (most recent call last):
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 220, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 419, in run_validation
    value = self.to_internal_value(data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 472, in to_internal_value
    for field in fields:
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 355, in _writable_fields
    for field in self.fields.values():
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\utils\functional.py", line 80, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 349, in fields
    for key, value in self.get_fields().items():
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 1029, in get_fields
    field_names = self.get_field_names(declared_fields, info)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 1097, in get_field_names
    serializer_class=self.__class__.__name__
AssertionError: Cannot set both 'fields' and 'exclude' options on serializer GenreSerializer.
____________________ Test04TitleAPI.test_03_titles_detail _____________________

self = <tests.test_04_title.Test04TitleAPI object at 0x00000222E897CA08>
client = <django.test.client.Client object at 0x00000222E926DE08>
admin_client = <rest_framework.test.APIClient object at 0x00000222E91BF988>

    @pytest.mark.django_db(transaction=True)
    def test_03_titles_detail(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests\test_04_title.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:63: in create_titles
    genres = create_genre(admin_client)
tests\common.py:52: in create_genre
    admin_client.post('/api/v1/genres/', data=data)
venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:18: in create
    serializer.is_valid(raise_exception=True)
venv\lib\site-packages\rest_framework\serializers.py:220: in is_valid
    self._validated_data = self.run_validation(self.initial_data)
venv\lib\site-packages\rest_framework\serializers.py:419: in run_validation
    value = self.to_internal_value(data)
venv\lib\site-packages\rest_framework\serializers.py:472: in to_internal_value
    for field in fields:
venv\lib\site-packages\rest_framework\serializers.py:355: in _writable_fields
    for field in self.fields.values():
venv\lib\site-packages\django\utils\functional.py:80: in __get__
    res = instance.__dict__[self.name] = self.func(instance)
venv\lib\site-packages\rest_framework\serializers.py:349: in fields
    for key, value in self.get_fields().items():
venv\lib\site-packages\rest_framework\serializers.py:1029: in get_fields
    field_names = self.get_field_names(declared_fields, info)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <[AssertionError("Cannot set both 'fields' and 'exclude' options on serializer GenreSerializer.") raised in repr()] GenreSerializer object at 0x222e92e9b08>
declared_fields = OrderedDict()
info = FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('name', <django.db.models.fields.CharFiel..., related_model=<class 'reviews.models.Title'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))

    def get_field_names(self, declared_fields, info):
        """
        Returns the list of all field names that should be created when
        instantiating this serializer class. This is based on the default
        set of fields, but also takes into account the `Meta.fields` or
        `Meta.exclude` options if they have been specified.
        """
        fields = getattr(self.Meta, 'fields', None)
        exclude = getattr(self.Meta, 'exclude', None)
    
        if fields and fields != ALL_FIELDS and not isinstance(fields, (list, tuple)):
            raise TypeError(
                'The `fields` option must be a list or tuple or "__all__". '
                'Got %s.' % type(fields).__name__
            )
    
        if exclude and not isinstance(exclude, (list, tuple)):
            raise TypeError(
                'The `exclude` option must be a list or tuple. Got %s.' %
                type(exclude).__name__
            )
    
        assert not (fields and exclude), (
            "Cannot set both 'fields' and 'exclude' options on "
            "serializer {serializer_class}.".format(
>               serializer_class=self.__class__.__name__
            )
        )
E       AssertionError: Cannot set both 'fields' and 'exclude' options on serializer GenreSerializer.

venv\lib\site-packages\rest_framework\serializers.py:1097: AssertionError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/genres/
Traceback (most recent call last):
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 220, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 419, in run_validation
    value = self.to_internal_value(data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 472, in to_internal_value
    for field in fields:
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 355, in _writable_fields
    for field in self.fields.values():
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\utils\functional.py", line 80, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 349, in fields
    for key, value in self.get_fields().items():
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 1029, in get_fields
    field_names = self.get_field_names(declared_fields, info)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 1097, in get_field_names
    serializer_class=self.__class__.__name__
AssertionError: Cannot set both 'fields' and 'exclude' options on serializer GenreSerializer.
_______________ Test04TitleAPI.test_04_titles_check_permission ________________

self = <tests.test_04_title.Test04TitleAPI object at 0x00000222E926DA48>
client = <django.test.client.Client object at 0x00000222E9374908>
admin_client = <rest_framework.test.APIClient object at 0x00000222E93746C8>

    @pytest.mark.django_db(transaction=True)
    def test_04_titles_check_permission(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests\test_04_title.py:231: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:63: in create_titles
    genres = create_genre(admin_client)
tests\common.py:52: in create_genre
    admin_client.post('/api/v1/genres/', data=data)
venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:18: in create
    serializer.is_valid(raise_exception=True)
venv\lib\site-packages\rest_framework\serializers.py:220: in is_valid
    self._validated_data = self.run_validation(self.initial_data)
venv\lib\site-packages\rest_framework\serializers.py:419: in run_validation
    value = self.to_internal_value(data)
venv\lib\site-packages\rest_framework\serializers.py:472: in to_internal_value
    for field in fields:
venv\lib\site-packages\rest_framework\serializers.py:355: in _writable_fields
    for field in self.fields.values():
venv\lib\site-packages\django\utils\functional.py:80: in __get__
    res = instance.__dict__[self.name] = self.func(instance)
venv\lib\site-packages\rest_framework\serializers.py:349: in fields
    for key, value in self.get_fields().items():
venv\lib\site-packages\rest_framework\serializers.py:1029: in get_fields
    field_names = self.get_field_names(declared_fields, info)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <[AssertionError("Cannot set both 'fields' and 'exclude' options on serializer GenreSerializer.") raised in repr()] GenreSerializer object at 0x222e9318e88>
declared_fields = OrderedDict()
info = FieldResult(pk=<django.db.models.fields.AutoField: id>, fields=OrderedDict([('name', <django.db.models.fields.CharFiel..., related_model=<class 'reviews.models.Title'>, to_many=True, to_field=None, has_through_model=False, reverse=True))]))

    def get_field_names(self, declared_fields, info):
        """
        Returns the list of all field names that should be created when
        instantiating this serializer class. This is based on the default
        set of fields, but also takes into account the `Meta.fields` or
        `Meta.exclude` options if they have been specified.
        """
        fields = getattr(self.Meta, 'fields', None)
        exclude = getattr(self.Meta, 'exclude', None)
    
        if fields and fields != ALL_FIELDS and not isinstance(fields, (list, tuple)):
            raise TypeError(
                'The `fields` option must be a list or tuple or "__all__". '
                'Got %s.' % type(fields).__name__
            )
    
        if exclude and not isinstance(exclude, (list, tuple)):
            raise TypeError(
                'The `exclude` option must be a list or tuple. Got %s.' %
                type(exclude).__name__
            )
    
        assert not (fields and exclude), (
            "Cannot set both 'fields' and 'exclude' options on "
            "serializer {serializer_class}.".format(
>               serializer_class=self.__class__.__name__
            )
        )
E       AssertionError: Cannot set both 'fields' and 'exclude' options on serializer GenreSerializer.

venv\lib\site-packages\rest_framework\serializers.py:1097: AssertionError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/genres/
Traceback (most recent call last):
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 18, in create
    serializer.is_valid(raise_exception=True)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 220, in is_valid
    self._validated_data = self.run_validation(self.initial_data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 419, in run_validation
    value = self.to_internal_value(data)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 472, in to_internal_value
    for field in fields:
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 355, in _writable_fields
    for field in self.fields.values():
  File "c:\dev\api_yamdb\venv\lib\site-packages\django\utils\functional.py", line 80, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 349, in fields
    for key, value in self.get_fields().items():
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 1029, in get_fields
    field_names = self.get_field_names(declared_fields, info)
  File "c:\dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 1097, in get_field_names
    serializer_class=self.__class__.__name__
AssertionError: Cannot set both 'fields' and 'exclude' options on serializer GenreSerializer.
-------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
=========================== short test summary info ===========================
FAILED tests/test_04_title.py::Test04TitleAPI::test_02_title_admin - Assertio...
FAILED tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail - Assert...
FAILED tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission
========================= 3 failed, 1 passed in 1.29s =========================
